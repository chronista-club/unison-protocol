// Unison Protocol - Ping Pong Example
// 
// This schema demonstrates basic Unison Protocol usage
// with simple ping/pong communication for testing and examples.

protocol "ping-pong" version="1.0.0" {
    namespace "unison.examples.ping_pong"
    description "Simple ping-pong communication example for Unison Protocol"
    
    // Ping request message
    message "PingRequest" {
        description "Ping request with optional message"
        field "message" type="string" required=false default="ping" description="Ping message content"
        field "sequence" type="number" required=false description="Sequence number for tracking"
        field "timestamp" type="timestamp" required=true description="Client timestamp"
    }
    
    // Pong response message  
    message "PongResponse" {
        description "Pong response echoing the ping"
        field "message" type="string" required=true description="Echoed ping message"
        field "sequence" type="number" required=false description="Echoed sequence number"
        field "client_timestamp" type="timestamp" required=true description="Original client timestamp"
        field "server_timestamp" type="timestamp" required=true description="Server response timestamp"
        field "latency_ms" type="number" required=false description="Calculated latency in milliseconds"
    }
    
    // Ping Pong service
    service "PingPong" {
        description "Simple ping-pong service for connectivity testing"
        
        method "ping" {
            description "Send a ping and receive a pong response"
            request {
                field "message" type="string" required=false default="Hello from client!"
                field "sequence" type="number" required=false
                field "expect_delay" type="number" required=false description="Expected response delay in ms"
            }
            response {
                field "message" type="string" required=true
                field "sequence" type="number" required=false  
                field "server_info" type="string" required=false description="Server identification"
                field "processed_at" type="timestamp" required=true
            }
        }
        
        method "echo" {
            description "Echo any JSON payload back to the client"
            request {
                field "data" type="json" required=true description="Data to echo back"
                field "transform" type="string" required=false description="Optional transformation to apply"
            }
            response {
                field "echoed_data" type="json" required=true description="Original or transformed data"
                field "transformation_applied" type="string" required=false
            }
        }
        
        method "get_server_time" {
            description "Get current server timestamp"
            request {
                // No fields required
            }
            response {
                field "server_time" type="timestamp" required=true
                field "timezone" type="string" required=false
                field "uptime_seconds" type="number" required=false
            }
        }
    }
}